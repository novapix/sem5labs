# -*- coding: utf-8 -*-
"""playfair_cipher.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jfRMGAgNBfvqBTc2us5Zfvgs_Xy_oYOY
"""

def generate_playfair_matrix(key):
    # Create a matrix filled wirh zeros
    matrix = [['' for _ in range(5)] for _ in range(5)]
    # Convert the key into upper case and remove dupes
    key = ''.join(sorted(set(key.upper()),key=key.upper().index))
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    key_index = 0
    for i in range(5):
        for j in range(5):
            if key_index < len(key):
                matrix[i][j] = key[key_index]
                key_index += 1
            else:
                while alphabet:
                    letter = alphabet[0]
                    alphabet = alphabet[1:]
                    if letter not in key:
                        matrix[i][j] = letter
                        break

    return matrix

def prepare_text(text):
    # Remove spaces and non alphabets characters, convert to uppercase
    text = ''.join(filter(str.isalpha, text)).upper()
    # Replace 'J' with 'I'
    text = text.replace('J', 'I')
    # Replace Double Letters With X
    i =0
    while i < len(text)-1:
        if text[i] == text[i+1]:
            text = text[:i+1] + 'X' + text[i+1:]
        i += 2
    if len(text) % 2 != 0:
        text += 'X'
    return text

def find_position(matrix,char):
    for i in range(5):
        for j in range(5):
            if matrix[i][j] == char:
                return (i,j)
    return None

def encrypt(text,key):
    matrix = generate_playfair_matrix(key)
    txt = prepare_text(text)
    ciphertext = ''
    # Encrypt the pair of letters
    for i in range(0,len(txt),2):
        c1 = txt[i]
        c2 = txt[i+1]
        row1, col1 = find_position(matrix,c1)
        row2, col2 = find_position(matrix,c2)
        if row1 == row2:
            ciphertext += matrix[row1][(col1+1)%5]
            ciphertext += matrix[row2][(col2+1)%5]
        elif col1 == col2:
            ciphertext += matrix[(row1+1)%5][col1]
            ciphertext += matrix[(row2+1)%5][col2]
        else:
            ciphertext += matrix[row1][col2] + matrix[row2][col1]
    return ciphertext

def decrypt(ciphertext,key):
    matrix = generate_playfair_matrix(key)
    plaintext = ''
    for i in range(0,len(ciphertext),2):
        c1 = ciphertext[i]
        c2 = ciphertext[i+1]
        row1, col1 = find_position(matrix,c1)
        row2, col2 = find_position(matrix,c2)
        if row1 == row2:
            plaintext += matrix[row1][(col1-1)%5]
            plaintext += matrix[row2][(col2-1)%5]
        elif col1 == col2:
            plaintext += matrix[(row1-1)%5][col1]
            plaintext += matrix[(row2-1)%5][col2]
        else:
            plaintext += matrix[row1][col2] + matrix[row2][col1]
    return plaintext

input_text = input("Enter Text to be Encryped: ")
key = input("Enter Key: ")
encrypted_text = encrypt(input_text,key)
print(f"Encyprpted Text : {encrypted_text}")
decrypted_text = decrypt(encrypted_text,key)
print(f"Decrypted Text : {decrypted_text}")